#!/usr/bin/python

import os
from threading import Thread
from notifylib.update import update_databases
from notifylib.create import create_db
from notifylib.add_url import Series
from gi.repository import Gtk,GObject
from gi.repository import AppIndicator3 as appindicator
from notifylib.base import Base

GObject.threads_init()
movie_path=os.environ['HOME']+'/.local/share/letmenotifyu/movies.sqlite'
series_path=os.environ['HOME']+'/.local/share/letmenotifyu/url.sqlite'


def series(*args):
     load=Series('inputDialog.glade',series_path)
     
def window(*args):
     app_Start=Base('main.glade',movie_path,series_path,'letmenotifyu.png')
    
class AppLet:
    def __init__(self):
        self.appInd=appindicator.Indicator.new("Letmenotifyu","/usr/share/letmenotifyu/ui/letmenotifyu.png",
                                      appindicator.IndicatorCategory.APPLICATION_STATUS)
        self.appInd.set_status(appindicator.IndicatorStatus.ACTIVE)
        self.menu=Gtk.Menu()

        self.open_view=Gtk.MenuItem("Open")
        self.menu.append(self.open_view)
        self.open_view.show()
        self.open_view.connect("activate",window)

        self.add_series=Gtk.MenuItem("Add Series")
        self.menu.append(self.add_series)
        self.add_series.show()
        self.add_series.connect("activate",series)

        quit=Gtk.MenuItem("Quit")
        self.menu.append(quit)
        quit.connect("activate",Gtk.main_quit)
        quit.show()
        
        self.appInd.set_menu(self.menu)
        update_thread=Thread(target=update_databases) #start update
        update_thread.setDaemon(True)
        update_thread.start()
        Gtk.main()

    
if __name__=="__main__":
    if os.path.exists(movie_path) and os.path.exists(series_path):
        start=AppLet()
    else:
        create_db(movie_path,series_path)
        start=AppLet()
    
   
